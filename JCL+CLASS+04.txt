1. INTRODUCTION TO JCL
2. JCL PARAMETERS
		1. JOB
		2. EXEC	--	PGM ,PROC , PARM , TIME , REGION , COND***
		3. DD 		DSN,DISP,SPACE,UNIT,VOL=SER,LRECL,RECFM,BLKSZIE
3. JCL UTILITES (PRE-CODED PGM)
4. JCL GDG CONCEPT
5. JCL PROC'S
6. JCL ABEND ->  S322 , S822..
=================================================================================
#JCL CLASS 04
=================================================================================
JCL UTILITIES:

	PRE-CODED PROGRAM HAVIN SINGLE FUNCTION OR MULTIPLE..

	COBOL -> WE CAN CODE ANY LOGIC THAT WE WANT - BUT - PGMS ARE ALWAYS LAYOUT DEPNENDENT..

	COPY PGM -> CLAIM-FILE -> 50 CHARACTER
		PGM-A => ENV - CLAIM-FNAME , DATA - LAYOUT - 50 CHAR --> READ - MOVE - WRITE  -> RUN JCL -> DDNAME - LRECL=50 -

	IF I WANT TO COPY ACCT FILE -> 60 CHARA - ANOTHER FILE.

JC UTIY -- THESE ARE NOT LAYOUT DEPENDENT.. - WITH SOME COMMON LOGIC

	IEBGENER -> COPY DATA FROM 1 FILE = ANOTHER

		CLAIM FILE  - 50
		ACCT FILE   - 60 CHAR

2ND =-> IF I WANT TO GET ANY COBOL PGM TO PRODUCTION..
	
COBOL		1. CODE 2. TEST  3. REVIEW 4. APPROV  5. IMP -> 6 PRODUCTION
UTIL		ARE ALREADY READY TO USE IN PRODUCTION...	
	

1. IEFBR14
2. IEBGENDER
3. IEBCOPY
4. IEBCOMPR
5. SORT /DFSORT /SYNCSORT
6. IDCAMS

1. IEFBR14  -->    USED TO CREATE AN EMPTY DATASET  AND TO DELETE AN EXISTING DATASET

		1. CREATE AN EMPTY DATASET

			1. MANUAL 	-> 3.2=A	=3.3
			2. JOB		-> COBOL-EXEC
					-> UTIL		- IEFBR14 , IEBGENER , SORT..

			WHY DO WE NEED TO CREATE EMPTY DATASET IN PROJECT??? /PRODUCTION	== MONDAY


		2. TO DELETE ANY EXISTING DATASET

			1. MANUAL	=> 3.4  =: D -DELETE
			2. JOB		=> UTIL

				IEBFR14	-->	//DDNAME  DD DSN=NAME,DISP=(OLD,DELETE,DELETE)

			WHY DO WE WANT TO DELETE A DATASET IN A JOB**				== MONDAY


	>> DISP=(NEW,CATLG,CATLG)  --> WHEN DO U WANT TO DELETE -> AT LAST STEP -> DELETE
	>> DISP=(NEW,CATLG,DELETE)  -> SAVE IT



2.  IEBGENER  --> LIKE , 3.3 => COPY FROM 1 PS  FILE  - ANOTHER PS FILE
		TO TAKE THE BACKUP OF THE DATA**

CASE-1
	//STEP1  EXEC PGM=IEBGENER		STEPLIB --- JOBLIB -- SYS-LIB (UTIL-LOAD)
	//SYSPRINT  DD SYSOUT=*
	//SYSOUT    DD SYSOUT=*
	//SYSUT1    DD DSN=INPUT.FILE.NAME,DISP=SHR
	//SYSUT2    DD DSN=OUTPUT.FILE.NAME,DISP=(NEW.. UNIT,VOL,SPACE..
	//SYSIN  DD DUMMY

CASE-2
//SYSUT1  DD DSN=INPUT.FILE.A,DISP=SHR
//SYSUT2  DD DSN=INPUT.FILE.A,DISP=SHR		== COMPRESS

CASE-3
//SYSUT1  DD DUMMY
//SYSUT2  DD DSN=EXIST.FILE.NAME,DISP=SHR	== EMPTY THE EXISTING FILE

CASE-4
//SYSUT1  DD DSN=INPUT.FILE.A,DISP=SHR
//        DD DSN=INPUT.FILE.B,DISP=SHR			DATASET CONCATINATION
//SYSUT2  DD DSN=OUTPUT.FILE.C,DISP=NEW...


3. IEBCOPY  ->  COPY PDS TO PDS -> WE DONT DO IN THE PROJECT AT ALL

4. IEBCOMPR ->  TO CPOMPARE A FILE OR PDS ..

	WE DONT USE THIS AT ALL.. COMPARE WE DO ...


DEVELOPER/MAIN -> REQUEST TO CHANGE A CODE OF LINE..

	1. PROD -> PROD-LIB (TOOL)					10 LINE		10000
	2. COPY OF THE CODE => PROD -> TO DEVL (PDS)			10 LINE		10000+UR CODE
	3. THERE U MADE THE REQUIRED CHANGES AS PER THE LOGIC
	4. REVIEW ->
			1. DID MEET FUCIOTNAL REQUIRMENT
			2. DID ALTER ANY EXISTING LOGIC		== 3.13 TO COMPARE THE CODE CHANGES

SUPT/ROLE

	ON A DAY -> JOB ABEND --> 1 RECORD IS WRONG -> PROBLEM - NOW I NEED TO REMOVE THE RECORD AND RERUN..

		>> IBMUSER.T6.CLAIM.PROD  --> SHALL I EDIT IN HERE!!
		>> COPY (3.3) IBMUSER.T6.CLAI.TEST  -> EDIT THE RECORD/CORR/RMOVE
		>> USE THIS TEST FILE AS INPUT FOR THE PROCESS..

			I NEED TO CHCK IF I MADE A CORRECTION ONLY TO THAT RECORD 

=============================================================================================

	     X(10)	   X(200)							FB=210			VB 214
	CLAIM-NUMBER, CLAIM-REJESCTION-NOTES			
	C1111111	INVALID AMOUNT							210			30 BYTES
	C2222222	INVALID DATE AND THIS CLAIM SHOULD BE IN THIS UNIT		210			60 BYTES


#JCL CLASS 03:
--------------------------------------------------------------------------------------------
JCL PARAMETERS:

DD STATMENT:

	//DDNAME  DD PARAMETER/LOCATION

	STEPLIB		- USED TO POINT THE PGM LOAD LOCATION	-- FOR A SINGLE STEP
	JOBLIB		- USED TO POINT THE PGM LOAD LOCATION	-- FOR ALL STEP IN A JOB

//JOBNAME  JOB
//JOBLIB  DD DSN=...
//STEP1 EXEC PGM=NAME
//STEPLIB  -- OPTIONAL

SUBMIT ->   STEPLIB - FOUND - EXECUTE
			NOT FOUND 	- JOBLIB  --FOUND - EXECUTE
						NOT FOUND		 -- SYSTEM DEFAULT LIB -> FOUND -EXECUTE (UTIL)
										NOT FOUND				--> ABEND =S806

	STEPLIB -- JOBLIB -- SYS-LIB -- S806

2.loadlib1 is for pgm01 and loadlib2 is for pgm02

//joblib dd dsn=loadlib1		-COME HERE - FOUND -> EXECUTE ==> PGM2 COME HERE - NOT FOUND --  SYS LIB - NOT FOUND -> 806
//step10 exec pgm=pgm01
//steplib dd dsn=loadlib2	-- NOT FOUND
.....
//step20 exec pgm=pgm02		-- NO STEPLIB 


PARAMETER OF THE DD STATEMENT:

			DSN			1. DSN=IBMUSER..  DASD FILE
						2. DSN=&&FILENAME  8 CHAR		&& - TEMP FILE	=TILL END OF THE JOB..
						3. DSN=&HQ..FILE.NAME 			&  - SYMBOLIC PARAMETER = PROC
						4. DUMMY				NOTHING - ANY OPERATION ON THAT DUMMY WIL BE SUCCESSFUL
						5. NO DSN				==> TEMP FILE		- TILL END OF THE STEP
						6. SYSOUT=*				== DATA TO DEFUALT - SPOOL
JOB J1
	S1 -> CREATE FILE F1
	S2 -> USING F1 - FILE F2

			DISP			DISP=SHR , MOD , OLD
						DISP=(NEW,CATLG,DELETE) 
						DISP=(NEW,CATLG,CATLG)
						DISP=(NEW,DELETE,DELETE)  - BY DEFAULT USED FOR TEMP FIES == (POINT 5 IN DSN)
						DISP=(NEW,PASS)  	--- TEMPFILE == DSN=POINT-=2

 OUTPUT+ NEW => NEW+DATA
 OUTPUT+SHR -> OVERIDE  
 OUTPUT+OLD -> OVERIDE  
 OUTPUT+MOD -> APPEND   

			UNIT, VOL-SER	
			SPACE		SPACE=(UNIT,(PQ,SQ),RLSE) 
								PQ= FIXED SPACE		= 1 : 1
								SQ= EXTENABLE SPACE	= 1 : 15
								RLSE --> IGNORE,LEAVE ALL UNUSED SPACE..
				SB37 -> 1. INCREASE THE SPACE RUN -- PRACTICAL WAY
				
			RECFM	==  FB - FIXED BLOCK - EACH RECORD WIL BE SAME LENGTH/SPACE
				    VB - VARYING BLOCK - EACH RECORD WIL BE DIFF LENGTH

			LRECL		FB -> LRECL = SAME AS SUM OF THE CHAR
					VB -> LRECL =  SUM OF CHAR + 4 BYTE
			
			BLKSIZE	= ZERO.

	SYSPRINT
	SYSOUT
	SYSIN

#JCL CLASS 02:
--------------------------------------------------------------------------------------------
JCL PARAMETERS:

//IBMUSERX  JOB (089098,28902),'TEST JOB',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),
//		TIME=10,REGION=0M,PRTY=10,
//		RESTART=STEPNAME,
//		NOTIFY=&SYSUID,
//		USER=RACFID (WHICH ID IS HAVING ACCESS)
//*MAIN  SECENV=92
//*ROUTE...

JES2 - JES3
---------
EXEC STATEMENT:

//STEPNAME  EXEC PGM=NAME

	PGM ,PROC

	EXEC - WE CAN EXECUTE A SINGLE PROGRAM -> PGM
	EXEC - WE CAN EXECUTE A COLLECTION OF PGM => PROC

//STEP1  EXEC PGM=NAME		-- SINGLE PGM
//STEP1  EXEC PROC=NAME		-- COLLECTION OF STEP1..
//STEP1  EXEC  NAME	-- IN HERE BY DEFAULT IT WIL BE PROC ONLY

TIME, REGION PARAMETER => WE ALREADY SEEN ON THE JOB..

--
COND PARAMETER**  
		 --> USED TO BYPASS OR EXECUTE A STEP IN THE JOB.


	//JOB J1					SUB A JOB
	//S1 - CREATE A FILE1				SUCCESS/FAIL
	//S2 - USING THE FILE1 -> FILE2			SUCESS
	//S3 - USING FILE2 -- FILE3			FAILED
	//S4 - USING FILE3 + TABLE -> REPORT

ANY JOB WE SUBMIT WITH STEP , THOSE STEP EXECUTION MAY BE SUCESS / FAIL


WHEN A STEP EXECUTE IT MAY BE SUSCCESS OR FAILED -> FAILED -> 2 TYPES

		1. ERROR	- COND CODE >4 (8,12)					--> SYSTEM STILL TRY TO EXECUTE THE BELOW STEPS
		2. ABEND	- 2 TYPES  1. SYSTEM ABEND  - S322,SB37,S822,S0C4,S0C7  --> SYSTEM WILL STOP THE PROCESS ON THE SAME STEP
					   2. USER ABEND    - U3091,U3091,U4309


	//JOB J1					SUB A JOB
	//S1 - CREATE A FILE1				CC = 0
	//S2 - USING THE FILE1 -> FILE2			CC  = 4
	//S3 - USING FILE2 -- FILE3			CC = 8 ERROR
	//S4 - USING FILE3 + TABLE -> REPORT		== WE NEED TO BYPASS  == HOW TO BYPASS A STEP IN A JOB... COND PARAMETER


COND PARAMETER (BYPASS SYNTAX)

			COND=(RC,OP,STEPNAME)  OR  COND=(RC,OP)  < TO USE
EXECEPT 1ST STEP , FOR ALL OTHER STEP  USE  COND=(4,LT)

COND=(4,LT)

S4	S1,S2,S3

  4 < 0		= FALSE
  4 < 4		= FALSE
  4 < 8		= TRUE	-->  BYPASS
  4 < 12	= TRUE  -->  BYPASS


ABEND  --> IN CASE OF ABEND , THE JOB STEP WIL BE STOPPED FROM EXECUTION.. 

		SOME TIME WE MIGHT NEED SOME STEPS TO RUN IN  ABEND CASE AS WELLL..

COND PARAMETER - USED TO EXECUTE A STEP: (EXECUTE SYNTAX)

	COND=EVEN	  THE STEP WIL ALWAYS EXECUTE IN ANY CASE
	COND=ONLY	 THE STEP WIL EXECUTE ONLY IF ITS PREVIOUS STEP ABEND..

JOB J1				CASE-1		2		3	4	5	
	S1			FINE		ERROR		FINE	ABEND  FINE
	S2			FINE		SKIP		ERROR	SKIP   ABEND
	S3,COND=EVEN		EXEC		EXEC		EXEC	EXEC	EXEC


JOB J2				CASE-1		2		3	4	5	
	S1			FINE		ERROR		FINE	ABEND  FINE
	S2			FINE		SKIP		ERROR	SKIP   ABEND
	S3,COND=ONLY		BYPASS		BYPASS		BYPASS	BYPASS EXEC


	JOB J1
		S1
		S2
		S3 - CREATE A REPORT
		S4 - SEND IT AS A MAIL		- IMP OF USER TO START HIS DAILY WORK

	6AM START , 30MIN 6.30AM -- _. ABEND -> TICKET -. FIX - RERUN -> 40MIN -> 30MIN -. 7.30 >>  -> USER WIL KEEP WAITING FOR THE MAIL
		USER -REQUEST TO SEND A  NOTIFCATION IN CASE OF JOB ABEND..

	JOB J1
		S1
		S2
		S3 - CREATE A REPORT									S3 - ABEND
		SX ,COND=ONLY - SEND THE MAIL - JOB ABENDED , REPORT WIL BE DELAYED			SX - EXECUTE,COND=ONLY
		S4 - SEND IT AS A MAIL		- IMP OF USER TO START HIS DAILY WORK			S4 - BYPASS/STOP

	COND=(4,LT) - BYPASS
	COND=EVEN/ONLY -- EXECUTE

	
#JCL CLASS 01:
======================================================================================
JCL  - JOB CONTROL LANG

	JOB -> MEANS EXECUTION OF 1 OR MORE PGMS
		EACH PGM EXEC IS KNOW AS A STEP

JOB -> STEPS

	1. JOB STATMENT
	2. EXEC 
	3. DD
	4. NULL 

JOB STATMENTS;	USED TO TELL THE JOB NAME AND JOB EXECUTION SETUP PARAMETER..

	//JOBNAME   JOB  NOTIFY=&SYSUID

JCL PARAMETER'S:

	2 TYPES		1. POSITIONAL PARAMETERS	- THE PARAMETER VALUE IS IDENFIFED BY THE SYSTEM BY PLACE OF THE VALUE 
			2. KEY WORD PARAMETERS		- IT JCL DEFINED WORD

		ON A JOB STATMENT WE HAVE 2 POSITIONAL PARAMETERS

			1. ACCOUNTING-INFRO		== USED TO TRACK THE RESOURCE UNTILIZATION..

				//JOBNMAE  JOB (098902,98902),
				//JOBNAME  JOB 98902
				//JOBNAME  JOB (0903,2NSJS,28902),


			2. PRORAMMER DESCRIPTION:	COMMENT/DETAILS PROCESS OF THE JOB - 20 CHARACTER

				//JOBNAME  JOB (08902,09),'TEST JOB'


	KEY WORD PARAMETERS:

		1. NOTIFY=&SYSUID		> USED TO GET THE JOB COMPLETION NOTIFICATION FROM THE JES SYSTEM..
					WE DONOT USE THIS IN PROD JOB'S

		2. CLASS=A/B/1/2	- ADMIN PROVIDED VALUE (COPY -PASTE)

			USED TO ALLOCATE THE REQUIRED RESOURCE FOR A JOB TO RUN?

			1. WHICH CPU?
			2. HOW LONG - TIME LIMIT
			3. REGION SPACE
			4. PRTY
			5. OTHERS

		3. TIME & REGION
			TIME=(MM,SS) == THIS IS USED TO INCREASE THE TIME FOR A GIVE JOB

				IN MY APPLICATION 100 JOB -> CLASS=X -> CPUX , CPU TIME LMIT => 5MIN FOR EACH JOB , REGION SPACE = 3MB

				90JOB - R ABLE TO COMPLETE WITHIN 5MIN
			 	10 JOB -> WHICH NEED MORE TIME (MORE STEPS , MORE DATA)
					BUT WHEN ANY JOB EXCEED THE TIME LIMIT --> ABEND	S322 => CPU TIME OUT ABEND

				S322 - CPU TIME OUT ABEND -> SOLUTION IS TO INCRASE THE TIME AND RERUN..
				HOW MUCH TIME I NEED TO INCREASE?
					
				>> JOB ABEND -> LOG -> 

					START TIME	- ABEND-TIME
					10AM			10.10AM	=	> 10 MIN TIME LIMIT
						10 *2 -> TIME=20 => RERUN	==> 95% IT WIL BE SUCCESSFULL
				 5% WHEN IT FAIL AGAIN WITH SAME S322??

					1. SYSTEM	- IS THE SYSTEM IS SLOW  (1 MIN - 1000 RECORDS , 1 MIN = 10 RECORDS)
								TIME=1440 (24 HR) - MONITOR THE RUN TILL IT COMPLETES
						
					2. DATA		- WHAT WAS THE DATA COUNT YESTERDAY** AND WHAT COUNT INPUT U GOT TODAY

							5000(YESTERDAY) , 20000 (TODAY) --> CHECK BACK AND SEE WHY WE HAVE SO MUCH OF DATA
							5000 (YESTERDAY) , 6000 (TODAY) --> NO ISSUE
					3. PROGRAM IN THE LOOP**
					



			REGION=XM  == THIS IS USED TO INCREASE THE REGION SPACE FOR A GIVE JOB
			
				90 JOB -> R ABLE TO COMPLETE WITH 2MB SPACE. REGION
				10 JOB -> WHICH NEED MORE REGION SPACE (MORE STEP , MORE DATA)

					ANY JOB THAT NEED MORE REGION SPACE -> ITS NOT FIND IT -> ABEND ->  S822 - REGION SPACE NOT ENOUGH

				S822 -> REGION=0M  - TO TELL THE SYSTEM TO ALLOCATE THE REQUIRED REGION SPACE..

					99% IT WIL FIX THE ISSUE... 
					1% --- STORAGE SPACE IS ITSELF NOT AVAIBALE --> CONTACT THE STORAGE TEAM - THEY WIL FIX IT

		5. PRTY =>  USED TO INCREAE  THE PRTY OF THE JOB...
			
			JOB J1 -> SUB		10AM
			JOB J2 -> SUB		10AM

				WHICH JOB WIL RUN FIRST ?  -> BOTH WIL RUN IN SAME TIME -> MAINFRAME CAN EXECUTION ALL DIFF JOB AT SAME TIME

			JOB J1 -> SUB		10AM	-- FILE1 - LOCK
			JOB J2 -> SUB		10AM	-- FILE1 - LOCK

				PRTY = JOB J1 /J2 WIL GET THE RESOUECE..

			SCHEULER TOOL - TO SET THE TIME LINE , DEPENDENCY.. 
		
		6. MSGCLASS=A/2/C  -> USED TO TELL WHERE THE LOGS NEED TO BE PRINTED
		
			//SYSOUT  DD SYSOUT=*		-> SPOOL
			//SYSPRINT DD SYSOUT=*		-> SPOOL

			  SPOOL , PRINTER , TOOL 	1. ARCHIVE , 2. ABEND  3. REPORT

		MSGCLASS=X  -> SPOOL , PRINTER**		//SYSOUT  DD SYSOUT=*	DEFAULT OF MSGCLASS
		MSGCLASS=Y  -> SPOOL** , ARCHIVE TOOL		//SYSOUT  DD SYSOUT=*	- SPOOL

		JOB WITH NO MSGCLASS -->  //SYSOUT  DD SYSOUT=* --?  SPOOL??  PRINTER!!

		//IBMUSERX JOB NOTIFY=&SYSUID		= AFTER SOME TIME -> MANAGE CALL - INVOIVE TEAM -> PRINT THE LOG ON OUR PRINTER..

		7. MSGLEVEL=(STATMENT,MESSAGE)  = USED TO TELL WHAT LOGS NEED TO BE PRINTED

					USE - MSGLEVEL=(1,1) 	= BY DEFAULT AS WELL

			SUBMIT -.	SPOOL		JESMSGLG -- JOB START - END TIME
							JESJCL	 -- JOB STATEMENT
							JESYSMSG -- RUNNING JOB STEP MESSAGE
			

			STATEMENT	0	-- JOB
					1	-- JOB + EXEC + DD + PROC**	MAXIMUM
					2	-- JOB + EXEC + DD

			MESSAGE		0	-- STEP START-END TIME
					1	--- START-STOP TIME -- RUNNING ALLOCATION ,CAT,PASS.. MESSAGE	= MAXIMUM

		8. RESTART=STEPNAME

			USED TO RUN A JOB FROM A PARTICULAR STEPS..
			ANY JOB THAT IS SUBMMITED WILL RUN FROM FIRST STEPS..

	//JOB J1	1ST RUN					2ND RUN,RESTART=S3
	//S1		FINE						SKIP		
	//S2		FINE						SKIP
	//S3		FAILED/S322	FIX THE ISSUE			EXECUTE
		


//IBMUSERX JOB NOTIFY=&SYSUID

//IBMUSERX  JOB (089098,28902),'TEST JOB',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),
//		TIME=10,REGION=0M,PRTY=10,
//		RESTART=STEPNAME,
//		NOTIFY=&SYSUID
